// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Migrations
{
    [DbContext(typeof(DatabaseTaskContext))]
    partial class DatabaseTaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseTask.Core.Models.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accesses");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppartmentNr")
                        .HasColumnType("int");

                    b.Property<int>("BuildingNr")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Devices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HintId")
                        .HasColumnType("int");

                    b.Property<int?>("JobHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalCode")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("SalaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ChildId");

                    b.HasIndex("HintId");

                    b.HasIndex("JobHistoryId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SalaryId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Hint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WorkTopicId");

                    b.ToTable("Hints");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.JobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("JobHistories");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobHistoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PositionCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PositionDisabledDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex("JobHistoryId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkTopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorEmployeeId");

                    b.HasIndex("WorkTopicId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Wage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.WorkTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HintId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HintId");

                    b.HasIndex("RequestId");

                    b.ToTable("WorkTopics");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Address", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Child", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Employee", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Employee", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Address", "Address")
                        .WithMany("Employees")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Models.Child", null)
                        .WithMany("Employees")
                        .HasForeignKey("ChildId");

                    b.HasOne("DatabaseTask.Core.Models.Hint", null)
                        .WithMany("Employees")
                        .HasForeignKey("HintId");

                    b.HasOne("DatabaseTask.Core.Models.JobHistory", "JobHistory")
                        .WithMany("Employees")
                        .HasForeignKey("JobHistoryId");

                    b.HasOne("DatabaseTask.Core.Models.Request", null)
                        .WithMany("Employees")
                        .HasForeignKey("RequestId");

                    b.HasOne("DatabaseTask.Core.Models.Salary", null)
                        .WithMany("Employees")
                        .HasForeignKey("SalaryId");

                    b.Navigation("Address");

                    b.Navigation("JobHistory");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Hint", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DatabaseTask.Core.Models.WorkTopic", "WorkTopic")
                        .WithMany("Hint")
                        .HasForeignKey("WorkTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("WorkTopic");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.JobHistory", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Employee", "Employee")
                        .WithMany("JobHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Models.Position", "Position")
                        .WithMany("JobHistory")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Position", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Access", "Access")
                        .WithMany("Positions")
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Models.JobHistory", null)
                        .WithMany("Positions")
                        .HasForeignKey("JobHistoryId");

                    b.Navigation("Access");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Request", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("CreatorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Models.WorkTopic", "WorkTopic")
                        .WithMany("Requests")
                        .HasForeignKey("WorkTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("WorkTopic");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Salary", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.WorkTopic", b =>
                {
                    b.HasOne("DatabaseTask.Core.Models.Hint", null)
                        .WithMany("WorkTopics")
                        .HasForeignKey("HintId");

                    b.HasOne("DatabaseTask.Core.Models.Request", null)
                        .WithMany("WorkTopics")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Access", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Address", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Child", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Employee", b =>
                {
                    b.Navigation("JobHistories");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Hint", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("WorkTopics");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.JobHistory", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Position", b =>
                {
                    b.Navigation("JobHistory");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Request", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("WorkTopics");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.Salary", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DatabaseTask.Core.Models.WorkTopic", b =>
                {
                    b.Navigation("Hint");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
